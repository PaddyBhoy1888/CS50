Syther text or encryption

The compiler used in the C is 

clang hello.c (to compile)

./a.out (to run)

To manually compile the code you can use clang hello.c for example. the ./a.out to run the compiled code.

You can use command line arguments to run the compiler and set the value to be output to run the file. e.g.

clang -o hello hello.c (example based on a file called heelo.c and stated that the command to run the file will be hello)

./hello (will run the file that has been compiled with the stated command word choice)

Note: - a.out is the standard default for clang output 

Note errors can occur when using clang as it can not give the clang enough information to seek functions. 

>clang -o hello hello.c -lcs50
>./hello 

The above is used to direct clang using the additional command line "-lcs50"

This is the second step to tell the compiler to action the library functions

>make //This allows you to action the compiler with a time saver function that uses clang.

There are 4 steps to compliling 
1 - Prepprocessing - Is something that is analysied before any action is started e.g. #include <cs50.h>. Usually in the computer/server in /usr/include typically in this folder. Clang looks for this file and copy and paste the information in the file but this is not visually seen

2 - compliling - Once a program has been preprocessed, now it converts the code to assembly code which is more closer to what the CPU's can understand. This is a lot less user frendily that does many differnt things in the background. 

3 - Assembling - This is where the compiled code is converted to computer code 0110 etc. 

4 - Linking - This links all the code together i.e. our code, stdio.h & cs50.h etc is all added together in machine code linking to give a full code.

De-compiling is converting code back to source code. Downside of this is the computer does not retain function names etc. and the information can be mixed or lost. Time consuming and costly.

De-bugging is a method for reading code and identifying errors that need to be corrected.

A method for debugging can be done using printf, for instance checking the value of a variable. (check buggy0.c file)

Another tool we can use is a debugger, this is a tool created by computer scienctist to help identify and correct bugs. The space to the left of the code line numbers has a red dot that when selected tells the de-bugger to stop at a specific point in the code i.e. break point. This is so the code can be stepped through at a more managable time interval to see what is happening between the this section. A command can be used "debug50" and then "code file name" which will step through that code an stop before the selected break point.

Within the debugger there are some key icons at the top that need to be noted. 

Continue - This will continue to play the rest of the code.

Step Over - This will play the last highlighted line of code where the breakpoint was placed, but not dive into the code. 

Along with the printf & debugger there is also another eature that is called a 'rubber duck'. The idea is which is to sound out what problem you are having. i.e. talk to a rubber duck object, speaking the issue out loud can be enough to help resolve an issue. Talking to others about the problem often helps were the illogical issue is.

DATA TYPES

There are different types of data types these are e.g. 

bool - 1 byte
int - 4 bytes
long - 8 bytes
float - 4 bytes
double - 8 bytes
char - 1 byte
string - ? bytes (Variable depending on what the user inputs)
...etc

Each of these types are given a specific amount of bits that are assigned by the computer. 

ARRAYS

These are a way of storing your data back to back to back in a way that you can access easily.

To get the values in the array you need to index into it.

This can be done with score[0], score[1], score[2] etc in-line with the code we completed.

We could further pass arrays around as arguments.

Consider the world of 'Char' if we had only single bytes. Strings are technically an array of characters. 

The way strings are defined to end C adds 1 more byte for a char '0'  or NUL. This happens automatticaly in C program.

Making strings with explicit 'char' are not very intuitive and could be time costly to write out. 

With strings being a set of 'char' we could extract the indavidual 'char' that make up a string by identifying the 'char' position i.e. [0], [1] etc etc


